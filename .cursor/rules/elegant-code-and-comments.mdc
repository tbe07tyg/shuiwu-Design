---
alwaysApply: true
---
# 优雅编码与详细注释（全局规则）

本规则在整个工作区生效，用于统一“可读、可维护、可对接”的编码与注释标准，确保后续后端对接与二次开发顺畅。

## 1. 模块与文件头注释
- 每个新建或修改较大的文件在顶部添加模块头注释（示例见 [planning.js](mdc:src/store/planning.js)）：
  - `@file`：文件用途（一句话）
  - `@description`：简要设计/数据流说明
  - 如涉及关键策略（如“基线⊕覆写⊕合并”），注明设计动机与约束

## 2. 函数与导出 API 注释
- 对外/复用函数使用 JSDoc（参数/返回值/边界情况/错误抛出）。
- 复杂函数要解释“为什么”和“策略”，不是只解释“做了什么”。
- 示例参照工具模块 [planningMerge.js](mdc:src/utils/planningMerge.js)。

## 3. 命名与可读性
- 变量使用完整语义名（避免 1-2 字符），函数名用动词或动宾短语。
- 表达意图优先于简短；避免晦涩缩写；必要时抽出中间变量承载条件语义。

## 4. 控制流与错误处理
- 使用早返回减少嵌套；对边界与失败分支优先处理。
- 不静默吞错：捕获后应提示/记录（message/log），并保留可追踪信息。
- 对“不可覆盖的数据层”（如用户覆写/人员分配）显式保护并加注释。

## 5. 数据与分层约束（前端）
- Store 层清晰分层：如 `baseline`（AI解析）/`userEdits`（用户覆写）/`metadata`/`assignments`/`draftPlan`。
- 展示层由计算属性（例如 `tasks`）合成，保证 UI 不直接改基线。
- 任何“合并/覆盖”操作必须提供：
  - 预览（diff） → 确认 → 快照（可回滚）
  - 字段级保护：被用户编辑过的字段不被复解析覆盖

## 6. 组件与页面
- Vue SFC 中 `<script setup>` 保持精简，复杂逻辑拆到 utils/store。
- Props/事件（emits）需在组件顶部注释交互契约（输入、输出、典型场景）。
- 与 UI 文案相关的常量集中管理；不在渲染表达式中堆积常量。

## 7. 注释风格
- 注释写“为什么”和“设计选择”，避免复述代码字面含义。
- 复杂片段上方块注释；不在行尾加注以免破坏对齐。
- 标注兼容/迁移/安全边界（例如“仅新增，不覆盖用户覆写与分配”）。

## 8. 变更提案与合并策略（示例）
- 复解析导入时遵循“安全合并”默认：
  - 仅新增（applyAdditions=true）
  - 不更新（applyUpdates=false）
  - 不归档（archiveRemovals=false）
- 任何“更新/归档”需通过变更提案 UI 复选并确认。
- 对应实现见 [planning.js](mdc:src/store/planning.js) 与 [planningMerge.js](mdc:src/utils/planningMerge.js)。

## 9. 日志与快照
- 重要写操作前创建快照（可回滚），记录创建时间。
- 控制台日志遵循前缀与等级（✅/⚠️/❌ 或 message 级别），便于排查。

## 10. 兼容与扩展
- 避免在 UI 逻辑中写死后端约束；将策略参数化，利于后续接入真实接口。
- 工具模块尽量保持与框架无关（无 Vue 依赖），便于迁往后端共享逻辑。

> 说明：本规则不强制使用 TypeScript，以与现有代码风格保持一致；若新增 TS 文件，亦应遵循上述注释与分层规范。

