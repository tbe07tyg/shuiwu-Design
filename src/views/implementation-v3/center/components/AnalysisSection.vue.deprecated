<!--
 * @file 解析区域组件
 * @description 用于展示申报书解析的各个区域内容和提取的任务
 * @author 科研管理系统
 * @version 3.0.0
 * @date 2025-01-29
-->
<template>
  <div class="analysis-section" :class="{ 'task-relevant': taskRelevant }">
    <!-- 区域标题 -->
    <div class="section-header">
      <h4 class="section-title">
        {{ title }}
        <a-tag v-if="taskRelevant" color="blue" size="small">
          任务拆解
        </a-tag>
        <a-tag v-if="tasks && tasks.length > 0" color="green" size="small">
          {{ tasks.length }}个任务
        </a-tag>
        <a-tag v-if="priority === 'high'" color="red" size="small">
          ⭐ 重点
        </a-tag>
      </h4>
      
      <div class="section-actions">
        <a-space size="small">
          <a-button size="small" @click="handleEdit" v-if="editable">
            <EditOutlined />
            编辑
          </a-button>
          <a-button 
            size="small" 
            @click="viewTasks"
            v-if="taskRelevant && tasks && tasks.length > 0"
          >
            <EyeOutlined />
            查看任务 ({{ tasks.length }})
          </a-button>
        </a-space>
      </div>
    </div>
    
    <!-- 区域内容 -->
    <div class="section-content">
      <!-- 解析状态 -->
      <div class="parse-status" v-if="!data || !data.content">
        <a-empty 
          description="暂无解析结果"
          image="simple"
        >
          <template #description>
            <span class="empty-description">
              请先使用豆包解析申报书内容
            </span>
          </template>
        </a-empty>
      </div>
      
      <!-- 解析内容 -->
      <div class="parsed-content" v-else>
        <div class="content-text">
          {{ data.content }}
        </div>
        
        <!-- 豆包提取的任务预览 -->
        <div class="task-preview" v-if="taskRelevant && tasks && tasks.length > 0">
          <h5>🤖 豆包提取的任务 ({{ tasks.length }}个)：</h5>
          <div class="task-tags">
            <a-tag 
              v-for="task in tasks.slice(0, 5)" 
              :key="task.id"
              :color="getTaskTypeColor(task.type)"
              style="margin: 4px;"
            >
              {{ task.name }}
            </a-tag>
            <a-tag v-if="tasks.length > 5" color="default" style="margin: 4px;">
              +{{ tasks.length - 5 }}个任务...
            </a-tag>
          </div>
          <a-button size="small" type="link" @click="viewAllTasks">
            查看全部任务 →
          </a-button>
        </div>
        
        <!-- 详细任务列表（展开时显示） -->
        <div class="detailed-tasks" v-if="showDetailedTasks && tasks && tasks.length > 0">
          <a-divider>详细任务列表</a-divider>
          <div class="task-list">
            <div 
              v-for="task in tasks" 
              :key="task.id"
              class="task-item"
              :class="`priority-${task.priority}`"
            >
              <div class="task-header">
                <span class="task-name">{{ task.name }}</span>
                <a-space size="small">
                  <a-tag :color="getTaskTypeColor(task.type)" size="small">
                    {{ getTaskTypeText(task.type) }}
                  </a-tag>
                  <a-tag :color="getPriorityColor(task.priority)" size="small">
                    {{ getPriorityText(task.priority) }}
                  </a-tag>
                </a-space>
              </div>
              
              <div class="task-details" v-if="task.description">
                <p class="task-description">{{ task.description }}</p>
                
                <div class="task-meta">
                  <a-space size="small" wrap>
                    <span v-if="task.estimatedDuration">
                      ⏱️ {{ task.estimatedDuration }}天
                    </span>
                    <span v-if="task.dependencies && task.dependencies.length > 0">
                      🔗 依赖{{ task.dependencies.length }}个任务
                    </span>
                    <span v-if="task.deliverables && task.deliverables.length > 0">
                      📦 {{ task.deliverables.length }}个交付物
                    </span>
                    <span v-if="task.technicalDifficulty">
                      🎯 难度: {{ getDifficultyText(task.technicalDifficulty) }}
                    </span>
                  </a-space>
                </div>
                
                <!-- 交付物列表 -->
                <div class="deliverables" v-if="task.deliverables && task.deliverables.length > 0">
                  <strong>交付物：</strong>
                  <a-tag 
                    v-for="deliverable in task.deliverables" 
                    :key="deliverable"
                    color="purple"
                    size="small"
                    style="margin: 2px;"
                  >
                    {{ deliverable }}
                  </a-tag>
                </div>
                
                <!-- 关键技术 -->
                <div class="key-technologies" v-if="task.keyTechnologies && task.keyTechnologies.length > 0">
                  <strong>关键技术：</strong>
                  <a-tag 
                    v-for="tech in task.keyTechnologies" 
                    :key="tech"
                    color="cyan"
                    size="small"
                    style="margin: 2px;"
                  >
                    {{ tech }}
                  </a-tag>
                </div>
                
                <!-- 验收标准 -->
                <div class="criteria" v-if="task.criteria && task.criteria.length > 0">
                  <strong>验收标准：</strong>
                  <ul class="criteria-list">
                    <li v-for="criterion in task.criteria" :key="criterion">
                      {{ criterion }}
                    </li>
                  </ul>
                </div>
              </div>
              
              <div class="task-actions">
                <a-space size="small">
                  <a-button size="small" @click="editTask(task)">
                    <EditOutlined />
                    编辑
                  </a-button>
                  <a-button size="small" @click="viewDependencies(task)" v-if="task.dependencies && task.dependencies.length > 0">
                    <NodeIndexOutlined />
                    依赖关系
                  </a-button>
                  <a-button size="small" @click="viewTaskDetails(task)">
                    <InfoCircleOutlined />
                    详情
                  </a-button>
                </a-space>
              </div>
            </div>
          </div>
        </div>
        
        <!-- 最后修改时间 -->
        <div class="last-modified" v-if="data.lastModified">
          <small class="text-muted">
            最后修改：{{ formatTime(data.lastModified) }}
          </small>
        </div>
      </div>
    </div>
    
    <!-- 展开/收起按钮 -->
    <div class="section-footer" v-if="taskRelevant && tasks && tasks.length > 0">
      <a-button 
        type="link" 
        size="small" 
        @click="toggleDetailedTasks"
      >
        {{ showDetailedTasks ? '收起详细任务' : '展开详细任务' }}
        <UpOutlined v-if="showDetailedTasks" />
        <DownOutlined v-else />
      </a-button>
    </div>
  </div>
</template>

<script setup>
import { ref, computed } from 'vue'
import { 
  EditOutlined, 
  EyeOutlined, 
  NodeIndexOutlined, 
  InfoCircleOutlined,
  UpOutlined,
  DownOutlined
} from '@ant-design/icons-vue'

// Props
const props = defineProps({
  title: {
    type: String,
    required: true
  },
  data: {
    type: Object,
    default: () => ({ content: '', lastModified: null })
  },
  tasks: {
    type: Array,
    default: () => []
  },
  editable: {
    type: Boolean,
    default: true
  },
  taskRelevant: {
    type: Boolean,
    default: false
  },
  priority: {
    type: String,
    default: 'medium'
  }
})

// Emits
const emit = defineEmits(['edit', 'viewTasks', 'editTask', 'viewDependencies', 'viewTaskDetails'])

// 响应式数据
const showDetailedTasks = ref(false)

// 方法定义

/**
 * 获取任务类型颜色
 */
const getTaskTypeColor = (type) => {
  const colorMap = {
    implementation: 'blue',
    technical: 'green',
    milestone: 'orange',
    research: 'purple'
  }
  return colorMap[type] || 'default'
}

/**
 * 获取任务类型文本
 */
const getTaskTypeText = (type) => {
  const textMap = {
    implementation: '实施任务',
    technical: '技术任务',
    milestone: '里程碑',
    research: '研究任务'
  }
  return textMap[type] || '其他'
}

/**
 * 获取优先级颜色
 */
const getPriorityColor = (priority) => {
  const colorMap = {
    high: 'red',
    medium: 'orange',
    low: 'green'
  }
  return colorMap[priority] || 'default'
}

/**
 * 获取优先级文本
 */
const getPriorityText = (priority) => {
  const textMap = {
    high: '高',
    medium: '中',
    low: '低'
  }
  return textMap[priority] || '中'
}

/**
 * 获取技术难度文本
 */
const getDifficultyText = (difficulty) => {
  const textMap = {
    high: '高',
    medium: '中',
    low: '低'
  }
  return textMap[difficulty] || '中'
}

/**
 * 格式化时间
 */
const formatTime = (timeString) => {
  if (!timeString) return ''
  
  try {
    const date = new Date(timeString)
    return date.toLocaleString('zh-CN')
  } catch (error) {
    return timeString
  }
}

/**
 * 处理编辑
 */
const handleEdit = () => {
  emit('edit', { 
    section: props.title, 
    data: props.data 
  })
}

/**
 * 查看任务
 */
const viewTasks = () => {
  emit('viewTasks', { 
    section: props.title, 
    tasks: props.tasks 
  })
}

/**
 * 查看所有任务
 */
const viewAllTasks = () => {
  viewTasks()
}

/**
 * 切换详细任务显示
 */
const toggleDetailedTasks = () => {
  showDetailedTasks.value = !showDetailedTasks.value
}

/**
 * 编辑任务
 */
const editTask = (task) => {
  emit('editTask', task)
}

/**
 * 查看依赖关系
 */
const viewDependencies = (task) => {
  emit('viewDependencies', task)
}

/**
 * 查看任务详情
 */
const viewTaskDetails = (task) => {
  emit('viewTaskDetails', task)
}
</script>

<style scoped>
.analysis-section {
  margin-bottom: 16px;
  border: 1px solid #f0f0f0;
  border-radius: 8px;
  padding: 16px;
  background: #fafafa;
  transition: all 0.3s ease;
}

.analysis-section:hover {
  border-color: #d9d9d9;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
}

.analysis-section.task-relevant {
  border-color: #1890ff;
  background: linear-gradient(135deg, #f0f8ff 0%, #fafafa 100%);
}

.section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 12px;
}

.section-title {
  margin: 0;
  font-size: 16px;
  font-weight: 600;
  display: flex;
  align-items: center;
  gap: 8px;
}

.section-content {
  min-height: 60px;
}

.content-text {
  line-height: 1.6;
  color: #333;
  white-space: pre-wrap;
  background: #fff;
  padding: 12px;
  border-radius: 6px;
  border: 1px solid #f0f0f0;
  margin-bottom: 12px;
}

.task-preview {
  margin-top: 12px;
  padding: 12px;
  background: #f0f8ff;
  border-radius: 6px;
  border-left: 4px solid #1890ff;
}

.task-preview h5 {
  margin: 0 0 8px 0;
  color: #1890ff;
}

.task-tags {
  margin-bottom: 8px;
}

.detailed-tasks {
  margin-top: 16px;
}

.task-list {
  space-y: 12px;
}

.task-item {
  border: 1px solid #e8e8e8;
  border-radius: 8px;
  padding: 12px;
  margin-bottom: 8px;
  background: #fff;
  transition: all 0.3s ease;
}

.task-item:hover {
  border-color: #1890ff;
  box-shadow: 0 2px 8px rgba(24, 144, 255, 0.1);
}

.task-item.priority-high {
  border-left: 4px solid #ff4d4f;
}

.task-item.priority-medium {
  border-left: 4px solid #faad14;
}

.task-item.priority-low {
  border-left: 4px solid #52c41a;
}

.task-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 8px;
}

.task-name {
  font-weight: 600;
  color: #333;
  flex: 1;
  margin-right: 12px;
}

.task-description {
  color: #666;
  margin: 8px 0;
  line-height: 1.5;
}

.task-meta {
  font-size: 12px;
  color: #999;
  margin: 8px 0;
}

.deliverables,
.key-technologies,
.criteria {
  margin: 8px 0;
  font-size: 13px;
}

.criteria-list {
  margin: 4px 0 0 16px;
  padding: 0;
}

.criteria-list li {
  margin: 2px 0;
  color: #666;
}

.task-actions {
  margin-top: 8px;
  text-align: right;
}

.last-modified {
  margin-top: 12px;
  text-align: right;
}

.text-muted {
  color: #999;
}

.section-footer {
  margin-top: 12px;
  text-align: center;
  border-top: 1px solid #f0f0f0;
  padding-top: 8px;
}

.empty-description {
  color: #999;
}

/* 响应式设计 */
@media (max-width: 768px) {
  .section-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 8px;
  }
  
  .task-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 8px;
  }
  
  .task-name {
    margin-right: 0;
  }
  
  .task-actions {
    text-align: left;
  }
}
</style>
